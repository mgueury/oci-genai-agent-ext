-- DROP TABLE docs;
CREATE TABLE APEX_APP.docs (
    id NUMBER GENERATED by default on null as IDENTITY,
    content CLOB,
    summary CLOB,
    translation CLOB,
    summary_embed vector(1024),
    filename varchar2(256),    
    path varchar2(1024),    
    content_type varchar2(256),
    region varchar2(256),    
    application_name varchar2(256),
    author varchar2(256),
    creation_date varchar2(256),    
    modified varchar2(256),    
    other1 varchar2(1024),    
    other2 varchar2(1024),    
    other3 varchar2(1024),    
    parsed_by varchar2(256),    
    publisher varchar2(256),
    source_type varchar2(256)
);
alter table "APEX_APP"."DOCS" add constraint "DOCS_PK" primary key ( "ID" );

-- DROP TABLE docs_chunck;
/*
CREATE TABLE APEX_APP.docs_chunck (
    id NUMBER GENERATED by default on null as IDENTITY,
    doc_id number,
    fileblob BLOB, -- Null when the file is outside of the DB, allow upload of files with for ex APEX
    content CLOB,
    translation CLOB,
    embed vector(1024),
    filename varchar2(256),    
    path varchar2(1024),    
    content_type varchar2(256),
    region varchar2(256),    
    page integer,
    char_start integer,
    char_end integer,
    summary CLOB
);
alter table "APEX_APP"."DOCS_CHUNCK" add constraint "DOCS_CHUNCK_PK" primary key ( "ID" );
alter table "APEX_APP"."DOCS_CHUNCK" add constraint "DOCS_FK" foreign key ( "DOC_ID" ) references "APEX_APP.DOCS" ( "ID" ) on delete cascade;
create index APEX_APP.docs_index on APEX_APP.docs_chunck( content ) indextype is ctxsys.context;  
*/

create or replace FUNCTION APEX_APP.embedText( c VARCHAR2 ) 
RETURN clob IS 
    resp DBMS_CLOUD_TYPES.resp; 
    b CLOB; 
    s CLOB; 
    start_vector number;
    stop_vector number;
    region varchar2(128);
    compartment_ocid varchar2(128);    
BEGIN 
    select value into region from AI_AGENT_RAG_CONFIG where key='region';
    select value into compartment_ocid from AI_AGENT_RAG_CONFIG where key='compartment_ocid';    
    resp := DBMS_CLOUD.send_request( 
        credential_name => 'OCI$RESOURCE_PRINCIPAL', 
        uri =>'https://inference.generativeai.'|| region || '.oci.oraclecloud.com/20231130/actions/embedText',
        method => 'POST', 
        body => UTL_RAW.cast_to_raw( JSON_OBJECT (
            'compartmentId' VALUE compartment_ocid,
            'servingMode' VALUE JSON_OBJECT( 'modelId' VALUE 'cohere.embed-multilingual-v3.0', 
                                             'servingType' VALUE 'ON_DEMAND' ),   
            'inputs' VALUE JSON_ARRAY( c ),
            'truncate' VALUE 'START'
        ))    
    ); 
    b := DBMS_CLOUD.get_response_text(resp); 
    -- JSON PARSING does not work....
    start_vector := instr(b,'[[')+1;
    stop_vector := instr(b, ']]')+1;
    select substr(b,start_vector, stop_vector-start_vector) into s; 
    return s;
END embedText; 
/

create or replace FUNCTION APEX_APP.RETRIEVAL_FUNC (p_query IN VARCHAR2,top_k IN NUMBER) RETURN SYS_REFCURSOR IS
    v_results SYS_REFCURSOR;
    query_vec VECTOR;
BEGIN
    query_vec := to_vector(embedText( p_query ));
    OPEN v_results FOR
        select 
            JSON_VALUE(metadata,'$.doc_id') as DOCID, 
            text as BODY, 
            vector_distance(embedding, query_vec) AS SCORE,
            id as CHUNKID, 
            JSON_VALUE(metadata,'$.file_name') as TITLE, 
            JSON_VALUE(metadata,'$.path') as URL,
            JSON_VALUE(metadata,'$.page_label') as page_numbers    
        from docs_langchain
        order by score 
        fetch first top_k rows only;
/*
    -- Oracle Text score: 0 - 100.0 (higher is better)
    -- Vector distance : 
    -- 0 - 1.0 (closer is better)
    OPEN v_results FOR
        WITH text_search AS (
            SELECT id, score(99)/100 as score FROM docs_chunck
            WHERE CONTAINS(content, :P14_ABOUT, 99)>0 order by score(99) DESC FETCH FIRST 10 ROWS ONLY
        ),
        vector_search AS (

            SELECT id, embed <=> :P14_VECTOR AS vector_distance
            FROM docs_chunck
        )
        SELECT 
            o.doc_id as docid, 
            o.id as CHUNKID,
            o.filename as TITLE, 
            o.path as URL, 
            TO_CHAR(content) as BODY
            (0.3 * ts.score + 0.7 * (1 - vs.vector_distance)) AS score
        FROM docs_chunck o
        JOIN text_search ts ON o.id = ts.id
        JOIN vector_search vs ON o.id = vs.id
        ORDER BY score DESC
        FETCH FIRST 10 ROWS ONLY;
*/

    RETURN v_results;

end RETRIEVAL_FUNC;
/

/*
insert into DOCS_CHUNCK(
       DOC_ID,
       FILENAME,
       PATH,
       Content,
       embed)
values( 1, 'oracle', 'https://www.oracle.com', 'hello world', embedtext('hello_world'));

-- Check the RETRIEVAL_FUNC function
-- Display the DOCID and SCORE
DECLARE
  v_results SYS_REFCURSOR;
  v_docid VARCHAR2(100);
  v_body VARCHAR2(4000);
  v_score NUMBER;
  p_query VARCHAR2(100) := 'hi';
  top_k NUMBER := 10;
BEGIN
  v_results := RETRIEVAL_FUNC(p_query, top_k);
 
  DBMS_OUTPUT.PUT_LINE('DOCID | SCORE');
  DBMS_OUTPUT.PUT_LINE('--------|------');
 
  LOOP
    FETCH v_results INTO v_docid, v_body, v_score;
    EXIT WHEN v_results%NOTFOUND;
 
    DBMS_OUTPUT.PUT_LINE(v_docid || ' | ' || v_score);
  END LOOP;
 
  CLOSE v_results;
END; 
*/

exit 
